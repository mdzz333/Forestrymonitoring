package com.example.forestrymonitoring;

import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;


import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.MapStatusUpdate;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;

import com.baidu.location.BDAbstractLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.BDLocation;


public class MapActivity extends AppCompatActivity {

    public MapView mMapView = null;
    public BaiduMap mBaiduMap = null;

    // public LocationClient mLocationClient = null;
    public BDAbstractLocationListener myListener = new MyLocationListener();
    //BDAbstractLocationListener为7.2版本新增的Abstract类型的监听接口，
// 原有BDLocationListener接口暂时同步保留。具体介绍请参考后文中的说明
    public LocationClient mLocClient = null;
    public MyLocationListenner myLocationListenner = null;
    public BDLocation location = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main_map);

        mLocClient = new LocationClient(MApplication.getContext());
        //声明LocationClient类
        mLocClient.registerLocationListener(myListener);
        //注册监听函数

        init();//初始化地图

        // 开启定位图层
        mBaiduMap.setMyLocationEnabled(true);
        // 定位初始化
        mLocClient = new LocationClient(this);
        mLocClient.registerLocationListener(myListener);
        LocationClientOption option = new LocationClientOption();
        option.setOpenGps(true);// 打开gps
        option.setCoorType("bd09ll"); // 设置坐标类型
        option.setScanSpan(1000);
        mLocClient.setLocOption(option);
        mLocClient.start();//开始监听

        //定位SDK监听函数
        myLocationListenner = new MyLocationListenner();
        myLocationListenner.setmBaiduMap(mBaiduMap);
        myLocationListenner.setmMapView(mMapView);
        myLocationListenner.setisFirstLoc(true);
//        location = new BDLocation();
        location = mLocClient.getLastKnownLocation();
//        myListener.onReceiveLocation(location);
        myLocationListenner.onReceiveLocation(location);

        //myListener.onLocDiagnosticMessage(location.getLocType(),location.get);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        //菜单组ID，菜单ID，排序，菜单名字
        menu.add(0, 1, 1, R.string.exit);
        menu.add(0, 2, 2, R.string.about);

        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        //菜单按钮回调函数
        if (item.getItemId() == 1)
            finish();
        else if (item.getItemId() == 2) {
            //生成一个Intent对象
            Intent intent = new Intent();
            intent.setClass(MapActivity.this, AboutActivity.class);
            MapActivity.this.startActivity(intent);//error
        }
        return super.onOptionsItemSelected(item);
    }

    /**
     * 初始化
     */
    private void init() {
        // 初始化控件
        this.initControls();
        // 初始化地图
        this.initMap();
    }

    /**
     * 初始化控件
     */
    private void initControls() {
        // 获取地图视图
        mMapView = (MapView) findViewById(R.id.bmapView);//error mapView=null
    }

    /**
     * 初始化地图
     */
    private void initMap() {
        // 不显示地图上比例尺
//        mapView.showScaleControl(false);
        // 不显示地图缩放控件（按钮控制栏）
//        mapView.showZoomControls(false);
        // 获取百度地图对象
        mBaiduMap = mMapView.getMap();//error baiduMap=bull mapView=null
        mBaiduMap.setMyLocationEnabled(true);
        // 设置为一般地图
        mBaiduMap.setMapType(BaiduMap.MAP_TYPE_NORMAL);

        //  卫星地图
//        baiduMap.setMapType(BaiduMap.MAP_TYPE_SATELLITE);

        //空白地图, 基础地图瓦片将不会被渲染。在地图类型中设置为NONE，将不会使用流量下载基础地图瓦片图层。使用场景：与瓦片图层一起使用，节省流量，提升自定义瓦片图下载速度。
//        baiduMap.setMapType(BaiduMap.MAP_TYPE_NONE);

        // 设置初始大图大小500米MapStatusUpdateFactory
        MapStatusUpdate msu = MapStatusUpdateFactory.zoomTo(15.0f);
        mBaiduMap.setMapStatus(msu);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理
        mMapView.onDestroy();
    }

    @Override
    protected void onResume() {
        super.onResume();
        //在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理
        mMapView.onResume();
    }

    @Override
    protected void onPause() {
        super.onPause();
        //在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理
        mMapView.onPause();
    }
}